generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

model Post {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  price       String
  images      String[]
  address     String
  city        String      
  bedroom     Int?
  bathroom    Int?
  latitude    Float
  longitude   Float
  type        Type
  property    Property
  createdAt   DateTime        @default(now())
  user        User            @relation(fields: [userId], references: [id])
  userId      String          @db.ObjectId
  postDetail  PostDetail?
  savedPosts  SavedPost[] 
  views       Int             @default(0)
  status      ApprovalStatus  @default(PENDING) 
}


enum Type {
  buy
  rent
}

enum Property {
  apartment
  house
  condo
  land
}

enum PropertyStatus {
  Available
  Booked
  SoldOut
}

model PostDetail {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  desc           String
  utilities      String?
  pet            String?
  income         String?
  size           Int?
  school         Int?
  bus            Int?
  restaurant     Int?
  propertyStatus PropertyStatus @default(Available)

  // üè° Property Area & Road
  totalArea      Int?
  buildUpArea    Int?
  dimension      String?
  roadType       String?
  propertyFace   String?
  roadAccess     Int?

  // üõãÔ∏è Additional Details
  kitchen        Int?
  livingRoom     Int?
  parking        Int?
  totalFloors    Int?
  builtYear      String?
  furnishing     String?
  plotNumber     String?
  propertyCode   String?
  collection     String?
  amenities      String[]       // Array for multiple selections

  // üó∫Ô∏è Nearby Location
  landmark        String?
  hospital        String?
  airport         String?
  pharmacy        String?
  bhatbhateni     String?
  college         String?
  gym             String?
  publicTransport String?
  policeStation   String?
  pashupatinath   String?
  boudhanath      String?
  atm             String?
  hotel           String?
  nearbyRestaurant String?
  banquet         String?
  wardOffice      String?
  ringRoad        String?

  post           Post           @relation(fields: [postId], references: [id])
  postId         String         @unique @db.ObjectId
}


model SavedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                   String         @id @default(auto()) @map("_id") @db.ObjectId
  email                String         @unique
  username             String         @unique
  password             String
  avatar               String?
  fullName             String?        
  phoneNumber          String?        
  role                 UserRole       @default(USER)
  active               Boolean        @default(true) 
  createdAt            DateTime       @default(now())
  posts                Post[]         
  savedPosts           SavedPost[]    
  chats                Chat[]         @relation(fields: [chatIDs], references: [id])
  chatIDs              String[]       @db.ObjectId
  notifications        Notification[] 
  testimonials         Testimonial[]  
  resetPasswordToken   String?        
  resetPasswordExpires DateTime?
}




model Chat {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  users      User[]    @relation(fields: [userIDs], references: [id])
  userIDs    String[]  @db.ObjectId
  createdAt  DateTime  @default(now())
  seenBy     String[]  @db.ObjectId
  messages   Message[]
  lastMessage String?
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  userId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Notification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId

  title      String                     // e.g., "New Post Pending"
  message    String                     // e.g., "Post titled 'Luxury Flat' is pending"
  read       Boolean  @default(false)   // Read/unread status
  createdAt  DateTime @default(now())

  // NEW fields to support system notifications
  type       String?                    // "POST" | "TESTIMONIAL" | "INFO" (optional)
  entityId   String?                    // ID of the post/testimonial (optional)
}


enum TestimonialStatus {
  PENDING
  APPROVED
  REJECTED
}

model Testimonial {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
  rating    Int
  comment   String
  status     TestimonialStatus @default(PENDING)
  createdAt DateTime @default(now())

}

